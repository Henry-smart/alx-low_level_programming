!<arch>
0-isupper.c/    0           0     0     644     224       `
#include "main.h"

/**
 * _isupper - check for uppercase character
 *
 *  @c: character
 *  Return: 1 if c is uppercase and 0 otherwise.
 */
int _isupper(int c)
{
	if (c <= 'Z' && c >= 'A')
	return (1);
	else
	return (0);
}
0-memset.c/     0           0     0     644     282       `
#include "main.h"
#include <string.h>

/**
 * _memset - a function that fills memory with a constant byte.
 * @s: pointer
 * @b: constant bytes
 * @n: bytes
 * Return: a pointer to the memory area s
 */

char *_memset(char *s, char b, unsigned int n)
{
	return (memset(s, b, n));
}
0-strcat.c/     0           0     0     644     400       `
#include "main.h"
/**
 * _strcat - concatenates two strings,
 * @dest: destination.
 * @src: source.
 * Return: the pointer to dest.
 */
char *_strcat(char *dest, char *src)
{
	int count = 0, count2 = 0;

	while (*(dest + count) != '\0')
	{
		count++;
	}
	while (count2 >= 0)
	{
		*(dest + count) = *(src + count2);
		if (*(src + count2) == '\0')
		break;
		count++;
		count2++;
	}
	return (dest);
}
1-isdigit.c/    0           0     0     644     230       `
#include "main.h"
/**
 * _isdigit - function that checks for a digit (0 through 9)
 * @c: int type number.
 * Return: 1 if c is a digit, 0 otherwise
 */
int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	return (1);
	return (0);
}
1-memcpy.c/     0           0     0     644     311       `
#include "main.h"
#include <string.h>

/**
 * _memcpy - a function that copies memory area.
 * @dest: first memory area
 *  @src: second memory area
 *   @n: number of bytes
 *   Return: a pointer to the memory area s
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	return (memcpy(dest, src, n));
}

1-strncat.c/    0           0     0     644     278       `
#include "main.h"
#include <string.h>

/**
 * _strncat -  a function that concatenates two strings.
 * @src: first parameter.
 * @dest: second parameter.
 * @n: third parameter.
 * Return: 0
 */

char *_strncat(char *dest, char *src, int n)
{
	return (strncat(dest, src, n));
}
100-atoi.c/     0           0     0     644     384       `
#include "main.h"
/**
 * _atoi - int
 * @s: pointer
 * Return: int.
 */
int _atoi(char *s)
{
	int i;
	int res = 0;
	int sig = -1;
	int brk = 0;

	for (i = 0; s[i] != '\0'; i++)
	{
		if (s[i] == '-')
		sig = sig * -1;
		if (s[i] >= '0' && s[i] <= '9')
		{
			res = res * 10;
			res -= (s[i] - '0');
			brk = 1;
		}
		else if (brk == 1)
			break;
	}
	res = sig * res;
	return (res);

}
2-strchr.c/     0           0     0     644     262       `
#include "main.h"

/**
 * _strchr - prints found c
 * @s: pointer to char
 * @c: char params to found
 * Return: *S
 */

char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] != '\0'; i++)
	{

		if (s[i] == c)
		{
			return (s + i);
		}
	}
	return (0);

}
2-strlen.c/     0           0     0     644     212       `
#include "main.h"
/**
 * _strlen - returns the length of a string
 * @s: input string.
 * Return: length of a string.
 */
int _strlen(char *s)
{
	int i = 0;

	while (*(s + i) != '\0')
	{
		i++;
	}
	return (i);
}
2-strncpy.c/    0           0     0     644     348       `
#include "main.h"
/**
 * _strncpy - copies a strin
 * @dest: destination.
 * @src: source.
 * @n: amount of bytes from src.
 * Return: the pointer to dest.
 */
char *_strncpy(char *dest, char *src, int n)
{
	int i;

	for (i = 0; i < n && src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	for ( ; i < n; i++)
	{
		dest[i] = '\0';
	}
	return (dest);
}
3-islower.c/    0           0     0     644     234       `
#include "main.h"
/**
 * _islower - checks for lowercase
 * description - return intetger
 * @c: c  intger
 * Return: 1 if lowercase
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     284       `
#include "main.h"
/**
 * _puts - prints a string, followed by a new line.
 * @str: input string.
 * Return: no return.
 */
void _puts(char *str)
{
	int count = 0;

	while (count >= 0)
	{
		if (str[count] == '\0')
	{
		_putchar('\n');
		break;
	}
	_putchar(str[count]);
	count++;
	}
}
3-strcmp.c/     0           0     0     644     357       `
#include "main.h"
/**
 * _strcmp - compares two strings
 * @s1: first string.
 * @s2: second string
 * Return: 0 if s1 and s2 are equals,
 * another number if not
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0, op = 0;

	while (op == 0)
	{
		if ((*(s1 + i) == '\0') && (*(s2 + i) == '\0'))
		break;
		op = *(s1 + i) - *(s2 + i);
		i++;
	}
	return (op);
}

3-strspn.c/     0           0     0     644     351       `
#include "main.h"
#include <string.h>
/**
 * _strspn - a function that gets the length of a prefix substring.
 *
 * @s: This is the C string to be scanned
 * @accept: This is the character to be searched in str.
 * Return: This function returns the number of characters
 */
unsigned int _strspn(char *s, char *accept)
{
	return (strspn(s, accept));
}

4-isalpha.c/    0           0     0     644     266       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 *@c: is char type
 * Return: 1 (if letter)
 */
int _isalpha(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else if (c >= 'A' && c <= 'Z')
	{
		return (1);
	}
	else
	{
		return (0);
	}

}
4-strpbrk.c/    0           0     0     644     305       `
#include "main.h"
#include <stdio.h>

/**
 * _strpbrk - bytes
 * @s: pointer to char
 * @accept: pointer to char
 * Return: NULL
 */

char *_strpbrk(char *s, char *accept)
{
	int i;

	while (*s)
	{
		for (i = 0; accept[i]; i++)
	{
		if (*s == accept[i])
	{
		return (s);
	}
	}
	s++;
	}
	return (NULL);

}

5-strstr.c/     0           0     0     644     389       `
#include "main.h"
#include <string.h>
/**
 * _strstr - a function t///hat locates a substring.
 *
 * @haystack: This is the C string to be scanned
 * @needle: second parameter
 * Return: a pointer to the first occurrence of
 * needle in haystack or a null pointer if
 * needle is not part of haystack
 */
char *_strstr(char *haystack, char *needle)
{
	return (strstr(haystack, needle));
}

6-abs.c/        0           0     0     644     232       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer
 *@z: return int
 * Return: integer
 */
int _abs(int z)
{
	if (z > 0)
	{
		return (z);
	}
	else if (z == 0)
	{
		return (z);
	}
	else
	{
		return (-z);
	}

}
9-strcpy.c/     0           0     0     644     272       `
#include "main.h"

/**
 * *_strcpy - copy strg to another string
 * @dest: pointer
 * @src: poiter
 * Return: numbers dest
 */

char *_strcpy(char *dest, char *src)
{
	int i;

	for (i = 0; src[i] != '\0'; i++)
	{
		dest[i] = src[i];
	}
	dest[i] = '\0';
	return (dest);

}
_putchar.c/     0           0     0     644     246       `
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
